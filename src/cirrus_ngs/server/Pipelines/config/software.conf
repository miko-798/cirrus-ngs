#!/bin/bash
software_dir=/shared/workspace/software

export PATH="$software_dir/anaconda3/bin:$PATH"
export fastqc="$software_dir/FastQC/fastqc"
export trimmomatic="$software_dir/Trimmomatic-0.36/trimmomatic-0.36.jar"
export bwa_genome="$software_dir/genomes/Hsapiens/bwa/ucsc.hg19.fasta"
export bwa="$software_dir/bwa/bwa-0.7.12/bwa"
export samblaster="$software_dir/samblaster/samblaster"
export samtools="$software_dir/samtools/samtools-1.1/samtools"
export sambamba="$software_dir/sambamba/0.4.7/bin/sambamba"
export mark_duplicates="$software_dir/picard-1.96/MarkDuplicates.jar"
export java="$software_dir/java/jre1.8.0_144/bin/java"
export bedtools="$software_dir/bedtools2/bin/bedtools"
export gatk="$software_dir/gatk/GenomeAnalysisTK-3.8-0/GenomeAnalysisTK.jar"
export genome_fai="$software_dir/sequences/Hsapiens/ucsc.hg19.fasta.fai"
export genome_fasta="$software_dir/sequences/Hsapiens/ucsc.hg19.fasta"
export dbsnp="$software_dir/variation/dbsnp_138.hg19.vcf"
export mills="$software_dir/variation/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf"
export G1000="$software_dir/variation/1000G_phase1.snps.high_confidence.hg19.sites.vcf"
export hapmap="$software_dir/variation/hapmap_3.3.hg19.sites.vcf"
export bgzip="$software_dir/tabix-0.2.6/bgzip"
export tabix="$software_dir/tabix-0.2.6/tabix"
export vcf_concat="$software_dir/vcftools_0.1.12b/bin/vcf-concat"
export vcf_sort="$software_dir/vcftools_0.1.12b/bin/custom-vcf-sort"
export omni="$software_dir/variation/1000G_omni2.5.hg19.sites.vcf"
export G1000snps="$software_dir/variation/1000G_phase1.snps.high_confidence.hg19.sites.vcf"
export G1000indels="$software_dir/variation/1000G_phase1.indels.hg19.sites.vcf"
export cosmic="~/tempcosmic.vcf"
export python="$software_dir/anaconda3/bin/python"
export PERL5LIB="/shared/workspace/software/vcftools_0.1.12b/perl/"

#Chip
export bowtie="$software_dir/bowtie-1.0.1/bowtie"
export bowtie_index="$software_dir/bowtie_index/hsapiens_hg19/genome"
export make_tag_directory="$software_dir/homer/bin/makeTagDirectory"
export make_UCSC_file="$software_dir/homer/bin/makeUCSCfile"
export find_peaks="$software_dir/homer/bin/findPeaks"
export annotate_peaks="$software_dir/homer/bin/annotatePeaks.pl"
export PATH=$PATH:"$software_dir/homer/bin"
export pos2bed="$software_dir/homer/bin/pos2bed.pl"
export find_motifs_genome="$software_dir/homer/bin/findMotifsGenome.pl"

#miRNA
export cutadapt="$software_dir/anaconda3/bin/cutadapt"
export bowtie2_index="$software_dir/bowtie2_index"
export hairpin_human_fa="$software_dir/bowtie_index/hairpin_human/hairpin_human.fa"
export multiqc="$software_dir/anaconda3/bin/multiqc"

# Kallisto
export kallisto="$software_dir/kallisto_linux-v0.43.1"
export kallisto_counts="$software_dir/kallisto/count_reads/transcript2gene_kallisto_counts_Hsa.pl"
export entrez_gene="$software_dir/kallisto/count_reads/gencode.v23.metadata.EntrezGene"
export gene_description="$software_dir/kallisto/count_reads/Hsa_gene_symbol_description.txt"

# Star
export STAR="$software_dir/STAR/2.5.3a/bin/Linux_x86_64/STAR"
export genomeDir="$software_dir/genomes/Hsapiens/star"
export ref_genes="$software_dir/gencode/gencode.v19.annotation.gtf"

check_exit_status()
{
    curr_command=$1
    curr_script=$2
    status_file=$3

    for i in `seq 3`
    do
        temp_output=`eval $curr_command 2>&1`
        if [ $? -eq 0 ]
        then
            echo "$temp_output"
            echo "$curr_script"_"passed" >> $status_file
            return
        fi
    done

    echo $temp_output
    echo "$curr_script"_"failed" >> $status_file
    exit
}

check_step_already_done()
{
    curr_script=$1
    status_file=$2

    if [ `grep "$curr_script"_"passed" $status_file | wc -l` -ne 0 ] && \
        [ `grep "$curr_script"_"failed" $status_file | wc -l` -eq 0 ]
    then
        echo "Already finished running $curr_script"
        exit
    else
        sed -i "/$curr_script.*$/d" $status_file
    fi
}

export -f check_exit_status
export -f check_step_already_done
